{"version":3,"sources":["context.js","ToDoItem.js","ToDoList.js","Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","input","marginRight","done","textDecoration","ToDoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","li","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","padding","ToDoList","props","todos","map","key","onToggle","display","justifyContent","AddTodo","lazy","App","useState","setTodos","loader","setLoader","useEffect","fetch","then","response","json","setTimeout","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","Loader","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAIeA,EAFCC,IAAMC,gBCIhBC,EAAS,CACXC,MAAO,CACHC,YAAa,QAEjBC,KAAM,CACFC,eAAgB,iBAmCTC,MA9Bf,YAA4C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrBC,EAAcC,qBAAWb,GAAzBY,WACDE,EAAU,GAMhB,OAJGL,EAAKM,WACJD,EAAQE,KAAK,QAIb,wBAAIC,MAAOd,EAAOe,IACd,0BAAMC,UAAWL,EAAQM,KAAK,MAC1B,2BAAOC,KAAK,WACZC,QAASb,EAAKM,UACdE,MAAOd,EAAOC,MACdO,SAAU,kBAAMA,EAASF,EAAKc,OAClC,gCAASb,EAAQ,GALjB,OAMOD,EAAKe,OAEZ,4BAAQL,UAAU,KAAKM,QAASb,EAAWc,KAAK,KAAMjB,EAAKc,KAA3D,UC9BNpB,EAAS,CACXwB,GAAI,CACAC,UAAW,OACXC,OAAQ,EACRC,QAAS,IAyBFC,MApBf,SAAmBC,GACf,OACI,wBAAIf,MAAOd,EAAOwB,IACbK,EAAMC,MAAMC,KAAI,SAACzB,EAAMC,GACpB,OAAO,kBAAC,EAAD,CACPD,KAAMA,EACN0B,IAAK1B,EAAKc,GACVb,MAAOA,EACPC,SAAUqB,EAAMI,gBCnBjB,oBAEf,yBAAKnB,MAAO,CAACoB,QAAS,OAAQC,eAAgB,SAAUT,OAAQ,UAC5D,yBAAKV,UAAU,oBCEboB,G,KAAUtC,IAAMuC,MAAK,kBAAO,iCA6DnBC,MA3Df,WAAgB,IAAD,EAEaxC,IAAMyC,SAAS,IAF5B,mBAENT,EAFM,KAECU,EAFD,OAKe1C,IAAMyC,UAAS,GAL9B,mBAKNE,EALM,KAKEC,EALF,KA4Cb,OArCAC,qBAAU,WACRC,MAAM,wDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAf,GACJkB,YAAW,WACTR,EAASV,GACTY,GAAU,KACV,SAGH,IA4BD,kBAAC,EAAQO,SAAT,CAAkBC,MAAO,CAAEzC,WAd7B,SAAoBW,GAClBoB,EAASV,EAAMqB,QAAO,SAAA7C,GAAI,OAAIA,EAAKc,KAAOA,SAcxC,yBAAKJ,UAAU,UACb,mGAEA,kBAAC,IAAMoC,SAAP,CAAgBC,SAAU,0CAC1B,kBAACjB,EAAD,CAASkB,SAff,SAAiBjC,GACfmB,EAASV,EAAMyB,OACb,CAAC,CACClC,QACAD,GAAIoC,KAAKC,MACT7C,WAAW,UAYT6B,GAAU,kBAACiB,EAAD,MACX5B,EAAM6B,OAAU,kBAAC,EAAD,CAAU7B,MAAOA,EAAOG,SAjC/C,SAAoBb,GAClBoB,EACEV,EAAMC,KAAI,SAAAzB,GAIR,OAHIA,EAAKc,KAAOA,IACdd,EAAKM,WAAaN,EAAKM,WAElBN,SA2B4DmC,EAAS,KAAQ,mFClDxEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.de416b41.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, { useContext }  from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css'\r\nimport Context from './context'\r\n\r\n\r\nconst styles = {\r\n    input: {\r\n        marginRight: '1rem'\r\n    },\r\n    done: {\r\n        textDecoration: \"line-through\"\r\n    }\r\n}\r\n\r\n\r\nfunction ToDoItem({todo, index, onChange}) {\r\n    const {removeTodo} = useContext(Context)\r\n    const classes = []\r\n\r\n    if(todo.completed) {\r\n        classes.push('done')\r\n    }\r\n\r\n    return (\r\n        <li style={styles.li}>\r\n            <span className={classes.join(' ')}>\r\n                <input type=\"checkbox\" \r\n                checked={todo.completed}\r\n                style={styles.input} \r\n                onChange={() => onChange(todo.id)}/>  \r\n            <strong>{index + 1}</strong>\r\n            &nbsp;{todo.title}\r\n            </span>\r\n            <button className=\"rm\" onClick={removeTodo.bind(null, todo.id)}>&times;</button>\r\n        </li> \r\n    )\r\n}\r\n/*\r\nToDoItem.PropTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: Proptypes.func.isRequired\r\n\r\n}*/\r\n\r\nexport default ToDoItem","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport ToDoItem from './ToDoItem'\r\n\r\nconst styles = {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\n\r\nfunction ToDoList (props) {\r\n    return (\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo, index) => {\r\n                return <ToDoItem \r\n                todo={todo} \r\n                key={todo.id} \r\n                index={index} \r\n                onChange={props.onToggle}/>\r\n            })}\r\n           \r\n        </ul>\r\n    )\r\n}\r\n\r\nToDoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ToDoList","import React from 'react';\r\n\r\nexport default () =>(\r\n\r\n<div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}>\r\n    <div className=\"lds-dual-ring\" />\r\n</div>\r\n\r\n)","import React, { useEffect } from 'react';\nimport ToDoList from './ToDoList'\nimport Context from './context'\nimport Loader from './Loader'\n//import Modal from \"./Modal\"\nimport './App.css';\n\nconst AddTodo = React.lazy(() => (import('./AddTodo')))\n\nfunction App() {\n\n  const [todos, setTodos] = React.useState([\n    /*{ id: 1, completed: false, title: 'купить' },\n  */])\n  const [loader, setLoader] = React.useState(true)\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos/?_limit=0')\n    .then(response => response.json())\n    .then(todos => {\n      setTimeout(() => {\n        setTodos(todos)\n        setLoader(false)\n      },50)\n    }\n    )\n  }, [])\n\n\n  function toggleTodo(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      }))\n\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n\n  function addTodo(title) {\n    setTodos(todos.concat(\n      [{\n        title,\n        id: Date.now(),\n        completed: false\n      }]))\n  }\n\n  return (\n    <Context.Provider value={{ removeTodo }}>\n      <div className=\"wraper\">\n        <h1>Список задач</h1>\n       \n        <React.Suspense fallback={<p>Loading...</p>}>\n        <AddTodo onCreate={addTodo}/>\n        </React.Suspense>\n         {loader && <Loader />}\n        {todos.length ? (<ToDoList todos={todos} onToggle={toggleTodo} />):loader ? null : (<p>Нет задач</p>)}\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}